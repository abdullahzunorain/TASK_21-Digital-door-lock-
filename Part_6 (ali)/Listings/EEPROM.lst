C51 COMPILER V9.60.7.0   EEPROM                                                            09/19/2024 12:25:00 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\EEPROM.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE EEPROM.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\EE
                    -PROM.lst) TABS(2) OBJECT(.\Objects\EEPROM.obj)

line level    source

   1          
   2          #include "EEPROM.h" 
   3          #include "LCD.h"      
   4          
   5          unsigned long counter = 0;
   6          
   7          void us_delay(unsigned int k)
   8          {
   9   1          while(k--);
  10   1      }
  11          
  12          void EEPROM_Init(void)
  13          {
  14   1          EEPROM_SDA = 1;     // Set SDA high.
  15   1          EEPROM_SCL = 1;     // Set SCL high.
  16   1      }
  17          
  18          
  19          void EEPROM_Start()
  20          {
  21   1          EEPROM_SCL = 0;   // Set SCL low.
  22   1          us_delay(1);       // Small delay.
  23   1          
  24   1          EEPROM_SCL = 1;    // Set SCL high.
  25   1          us_delay(1);        // Small delay.
  26   1          
  27   1          EEPROM_SDA = 0;    // Set SDA low to indicate the start condition.
  28   1          us_delay(1);        // Small delay.
  29   1          
  30   1          EEPROM_SCL = 0;    // Set SCL low to prepare for data transfer.
  31   1      }
  32          
  33          
  34          void EEPROM_Stop(void)
  35          {
  36   1          EEPROM_SCL = 0;     // Set SCL low.
  37   1          us_delay(1);         // Small delay.
  38   1          
  39   1          EEPROM_SDA = 0;     // Set SDA low to indicate the stop condition.
  40   1          us_delay(1);      // Small delay.
  41   1          
  42   1          EEPROM_SCL = 1;     // Set SCL high.
  43   1          us_delay(1);        // Small delay.
  44   1          
  45   1          EEPROM_SDA = 1;      // Set SDA high.
  46   1      }
  47          
  48          
  49          void EEPROM_ACK(void)
  50          {
  51   1          EEPROM_SDA = 0;     // Set SDA low to send ACK.
  52   1          us_delay(1);        // Small delay.
  53   1          
  54   1          EEPROM_SCL = 1;     // Set SCL high to acknowledge.
C51 COMPILER V9.60.7.0   EEPROM                                                            09/19/2024 12:25:00 PAGE 2   

  55   1          us_delay(1);        // Small delay.
  56   1          
  57   1          EEPROM_SCL = 0;       // Set SCL low.
  58   1          EEPROM_SDA = 1;       // Set SDA high.
  59   1      }
  60          
  61          
  62          void EEPROM_nACK(void)
  63          {
  64   1          EEPROM_SDA = 1;     // Set SDA high to send NACK.
  65   1          us_delay(1);         // Small delay.
  66   1          
  67   1          EEPROM_SCL = 1;     // Set SCL high.
  68   1          us_delay(1);        // Small delay.
  69   1          
  70   1          EEPROM_SCL = 0;     // Set SCL low.
  71   1          EEPROM_SDA = 1;     // Set SDA high.
  72   1      }
  73          
  74          
  75          void EEPROM_send(unsigned char Data)
  76          {
  77   1          unsigned char i;
  78   1          for (i = 0; i < 8; i++)
  79   1          {
  80   2              EEPROM_SDA = Data & 0x80;   // Set SDA according to the MSB of 'Data'.
  81   2              EEPROM_SCL = 1;              // Set SCL high to send the bit.
  82   2              EEPROM_SCL = 0;            // Set SCL low to prepare for the next bit.
  83   2              Data <<= 1;              // Shift 'Data' left to get the next bit.
  84   2          }
  85   1          EEPROM_ACK();            // Send ACK after sending the byte.
  86   1      }
  87          
  88          
  89          unsigned char EEPROM_Recev(void)
  90          {
  91   1          unsigned char i, Data = 0;
  92   1          for (i = 0; i < 8; i++)
  93   1          {
  94   2              us_delay(1);         // Small delay to stabilize the data.
  95   2              EEPROM_SCL = 1;       // Set SCL high to read the bit from SDA.
  96   2              Data |= EEPROM_SDA;     // Read the bit and store it in 'Data'.
  97   2              if (i < 7)
  98   2                  Data <<= 1;        // Shift 'Data' left to make space for the next bit.
  99   2              EEPROM_SCL = 0;       // Set SCL low to prepare for the next bit.
 100   2          }
 101   1          return Data;            // Return the received byte.
 102   1      }
 103          
 104          
 105          void EEPROM_Write_byte(unsigned char Data, unsigned char adrs, unsigned char page)
 106          {
 107   1          EEPROM_Start();                     // Start EEPROM communication.
 108   1          
 109   1          EEPROM_send(0xA0 | (page << 1));    // Send device address with page.
 110   1          EEPROM_send(adrs);                   // Send the memory address to write.
 111   1          EEPROM_send(Data);                  // Send the data to be written.
 112   1          
 113   1          EEPROM_Stop();                    // Stop EEPROM communication.
 114   1          ms_delay(5);                      // Delay for EEPROM write cycle completion.
 115   1      }
 116          
C51 COMPILER V9.60.7.0   EEPROM                                                            09/19/2024 12:25:00 PAGE 3   

 117          
 118          unsigned char EEPROM_Read_byte(unsigned char adrs, unsigned char page)
 119          {
 120   1          unsigned char Data;
 121   1          
 122   1          EEPROM_Start();                  // Start EEPROM communication.
 123   1          
 124   1          EEPROM_send(0xA0 | (page << 1));    // Send device address with page for writing.
 125   1          EEPROM_send(adrs);                 // Send the memory address to read from.
 126   1          
 127   1          EEPROM_Start();                     // Restart EEPROM communication.
 128   1          
 129   1          EEPROM_send(0xA1 | (page << 1));      // Send device address with page for reading.
 130   1          Data = EEPROM_Recev();              // Receive the data from EEPROM.
 131   1          
 132   1          EEPROM_nACK();                       // Send NACK to end the read operation.
 133   1          EEPROM_Stop();                      // Stop EEPROM communication.
 134   1          us_delay(10);                       
 135   1          
 136   1          return Data;                        // Return the read data.
 137   1      }
 138          
 139          void EEPROM_Write_4Bytes(unsigned long counterValue, unsigned char startingAddress)
 140          {
 141   1        unsigned int c;
 142   1          for (c = 0; c < 4; c++)
 143   1          {
 144   2              unsigned char byteValue = (counterValue >> (8 * c)) & 0xFF;
 145   2              EEPROM_Write_byte(byteValue, startingAddress + c, 0); // Starting address + i for consecutive memo
             -ry locations
 146   2          }
 147   1      }
 148          
 149          
 150          unsigned long EEPROM_Read_4Bytes(unsigned char startingAddress)
 151          {
 152   1        unsigned int d;
 153   1          unsigned long counterValue = 0;
 154   1          for (d = 0; d < 4; d++)
 155   1          {
 156   2              unsigned char byteValue = EEPROM_Read_byte(startingAddress + d, 0); // Starting address + i for co
             -nsecutive memory locations
 157   2              counterValue |= ((unsigned long)byteValue << (8 * d));
 158   2          }
 159   1          return counterValue;
 160   1      }
 161          
 162          
 163          void EEPROM_erase_all()
 164          {
 165   1        unsigned char i;
 166   1        for(i=0;i<255;i++)
 167   1        {
 168   2          EEPROM_Write_byte(0x00, i, 0);
 169   2          EEPROM_Write_byte(0x00, i, 1);
 170   2        } 
 171   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    386    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.60.7.0   EEPROM                                                            09/19/2024 12:25:00 PAGE 4   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
